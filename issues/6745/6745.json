{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": "2009-01-05T20:30:46.08-08:00",
    "CommentCount": 0,
    "Custom": null,
    "Description": "Got a crash when I was logged in as admin and tried to make a test comment on the default blog post. I have oxite running locally in IIS7 on Win7. Seems like it can't figure out my IP address.\nÂ \n[InvalidOperationException: Dude, what the heck?]\n   Oxite.IPAddressExtensions.ToLong(IPAddress address) in C:\\Users\\Jordan\\Documents\\Oxite\\Oxite\\Oxite\\IPAddressExtensions.cs:16\n   Oxite.Mvc.Controllers.AreaController.Permalink(String areaName, String slug, FormCollection form) in C:\\Users\\Jordan\\Documents\\Oxite\\Oxite\\Oxite.Mvc\\Controllers\\AreaController.cs:154\n   lambda_method(ExecutionScope , ControllerBase , Object[] ) +148\n   System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(MethodInfo methodInfo, IDictionary`2 parameters) +299\n   System.Web.Mvc.<>c__DisplayClassc.<InvokeActionMethodWithFilters>b__9() +74\n   System.Web.Mvc.ControllerActionInvoker.InvokeActionMethodFilter(IActionFilter filter, ActionExecutingContext preContext, Func`1 continuation) +340\n   System.Web.Mvc.ControllerActionInvoker.InvokeActionMethodWithFilters(MethodInfo methodInfo, IDictionary`2 parameters, IList`1 filters) +309\n   System.Web.Mvc.ControllerActionInvoker.InvokeAction(ControllerContext controllerContext, String actionName) +692\n   System.Web.Mvc.Controller.ExecuteCore() +155\n   System.Web.Mvc.MvcHandler.ProcessRequest(HttpContextBase httpContext) +153\n   System.Web.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute() +599\n   System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously) +171",
    "LastUpdatedDate": "2013-05-16T03:38:07.987-07:00",
    "PlannedForRelease": "Oxite.2009.1.5",
    "ReleaseVisibleToPublic": true,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "oxite",
    "ReportedDate": "2008-12-08T20:16:45.767-08:00",
    "Status": {
      "Name": "Closed",
      "Id": 4
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "System.InvalidOperationException: Dude, what the heck?",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 6745
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "We haven't tested Oxite on Windows 7 much yet.  Can you verify this also happens for you on Vista, Server 2008, XP or Server 2003?",
      "PostedDate": "2008-12-08T21:45:31.517-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I bet it's breaking on an IPv6 address - something else that hasn't been tested.",
      "PostedDate": "2008-12-09T06:40:27.297-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-12-09T06:40:32.077-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-12-13T07:05:28.663-08:00",
      "Id": -2147483648
    },
    {
      "Message": "I can't verify that right now :-) I'll try it on my server machine at work when I have a chance and let you know here.",
      "PostedDate": "2008-12-15T14:26:27.843-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Update on this issue:\r\nWhen running in Visual Studio (Web, Express), address.GetAddressBytes().Length is 4. When running on IIS7, address.GetAddressBytes().Length is 16. \r\nSo yeah, what skewed said. :-) \r\n\r\nIs there a better way to store the commentor's IP address in the database (string?)? Or can address be forced to report IPv4?",
      "PostedDate": "2008-12-15T18:42:35.927-08:00",
      "Id": -2147483648
    },
    {
      "Message": "A string would probably be better, or at least increasing the field to handle either IPv4 or IPv6",
      "PostedDate": "2008-12-15T21:01:02.507-08:00",
      "Id": -2147483648
    },
    {
      "Message": "This should be resolved in the most recent source. The code now checks if the IPAddress is a IPv4 address and if not it just puts a zero into the DB. Not ideal when the world moves to IPv6, but I think we have a bit of time on that.",
      "PostedDate": "2008-12-18T10:50:41.217-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2008-12-18T10:51:04.967-08:00",
      "Id": -2147483648
    },
    {
      "Message": "Okay, cool. I'll check it out tonight.",
      "PostedDate": "2008-12-19T11:44:58.803-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-01-05T20:30:36.207-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2009-01-05T20:30:46.08-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-02-21T15:43:17.48-08:00",
      "Id": -2147483648
    },
    {
      "Message": "",
      "PostedDate": "2013-05-16T03:38:07.987-07:00",
      "Id": -2147483648
    }
  ]
}