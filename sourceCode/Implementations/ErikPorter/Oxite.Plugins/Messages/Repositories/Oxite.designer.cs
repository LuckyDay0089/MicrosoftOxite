#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Oxite.Plugins.Messages.Repositories
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Oxite.Database")]
	public partial class OxiteDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertoxite_MessageOutbound(oxite_MessageOutbound instance);
    partial void Updateoxite_MessageOutbound(oxite_MessageOutbound instance);
    partial void Deleteoxite_MessageOutbound(oxite_MessageOutbound instance);
    #endregion
		
		public OxiteDataContext() : 
				base("Data Source=.\\SQLEXPRESS;Initial Catalog=Oxite.Database;Integrated Security=True", mappingSource)
		{
			OnCreated();
		}
		
		public OxiteDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OxiteDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OxiteDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OxiteDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<oxite_MessageOutbound> oxite_MessageOutbounds
		{
			get
			{
				return this.GetTable<oxite_MessageOutbound>();
			}
		}
	}
	
	[Table(Name="dbo.oxite_MessageOutbound")]
	public partial class oxite_MessageOutbound : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MessageOutboundID;
		
		private string _MessageTo;
		
		private string _MessageSubject;
		
		private string _MessageBody;
		
		private bool _IsSending;
		
		private byte _RemainingRetryCount;
		
		private System.Nullable<System.DateTime> _SentDate;
		
		private System.Nullable<System.DateTime> _LastAttemptDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageOutboundIDChanging(System.Guid value);
    partial void OnMessageOutboundIDChanged();
    partial void OnMessageToChanging(string value);
    partial void OnMessageToChanged();
    partial void OnMessageSubjectChanging(string value);
    partial void OnMessageSubjectChanged();
    partial void OnMessageBodyChanging(string value);
    partial void OnMessageBodyChanged();
    partial void OnIsSendingChanging(bool value);
    partial void OnIsSendingChanged();
    partial void OnRemainingRetryCountChanging(byte value);
    partial void OnRemainingRetryCountChanged();
    partial void OnSentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSentDateChanged();
    partial void OnLastAttemptDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastAttemptDateChanged();
    #endregion
		
		public oxite_MessageOutbound()
		{
			OnCreated();
		}
		
		[Column(Storage="_MessageOutboundID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MessageOutboundID
		{
			get
			{
				return this._MessageOutboundID;
			}
			set
			{
				if ((this._MessageOutboundID != value))
				{
					this.OnMessageOutboundIDChanging(value);
					this.SendPropertyChanging();
					this._MessageOutboundID = value;
					this.SendPropertyChanged("MessageOutboundID");
					this.OnMessageOutboundIDChanged();
				}
			}
		}
		
		[Column(Storage="_MessageTo", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string MessageTo
		{
			get
			{
				return this._MessageTo;
			}
			set
			{
				if ((this._MessageTo != value))
				{
					this.OnMessageToChanging(value);
					this.SendPropertyChanging();
					this._MessageTo = value;
					this.SendPropertyChanged("MessageTo");
					this.OnMessageToChanged();
				}
			}
		}
		
		[Column(Storage="_MessageSubject", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string MessageSubject
		{
			get
			{
				return this._MessageSubject;
			}
			set
			{
				if ((this._MessageSubject != value))
				{
					this.OnMessageSubjectChanging(value);
					this.SendPropertyChanging();
					this._MessageSubject = value;
					this.SendPropertyChanged("MessageSubject");
					this.OnMessageSubjectChanged();
				}
			}
		}
		
		[Column(Storage="_MessageBody", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string MessageBody
		{
			get
			{
				return this._MessageBody;
			}
			set
			{
				if ((this._MessageBody != value))
				{
					this.OnMessageBodyChanging(value);
					this.SendPropertyChanging();
					this._MessageBody = value;
					this.SendPropertyChanged("MessageBody");
					this.OnMessageBodyChanged();
				}
			}
		}
		
		[Column(Storage="_IsSending", DbType="Bit NOT NULL")]
		public bool IsSending
		{
			get
			{
				return this._IsSending;
			}
			set
			{
				if ((this._IsSending != value))
				{
					this.OnIsSendingChanging(value);
					this.SendPropertyChanging();
					this._IsSending = value;
					this.SendPropertyChanged("IsSending");
					this.OnIsSendingChanged();
				}
			}
		}
		
		[Column(Storage="_RemainingRetryCount", DbType="TinyInt NOT NULL")]
		public byte RemainingRetryCount
		{
			get
			{
				return this._RemainingRetryCount;
			}
			set
			{
				if ((this._RemainingRetryCount != value))
				{
					this.OnRemainingRetryCountChanging(value);
					this.SendPropertyChanging();
					this._RemainingRetryCount = value;
					this.SendPropertyChanged("RemainingRetryCount");
					this.OnRemainingRetryCountChanged();
				}
			}
		}
		
		[Column(Storage="_SentDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> SentDate
		{
			get
			{
				return this._SentDate;
			}
			set
			{
				if ((this._SentDate != value))
				{
					this.OnSentDateChanging(value);
					this.SendPropertyChanging();
					this._SentDate = value;
					this.SendPropertyChanged("SentDate");
					this.OnSentDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastAttemptDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> LastAttemptDate
		{
			get
			{
				return this._LastAttemptDate;
			}
			set
			{
				if ((this._LastAttemptDate != value))
				{
					this.OnLastAttemptDateChanging(value);
					this.SendPropertyChanging();
					this._LastAttemptDate = value;
					this.SendPropertyChanged("LastAttemptDate");
					this.OnLastAttemptDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
