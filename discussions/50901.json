[
  {
    "Id": "170581",
    "ThreadId": "50901",
    "Html": "I seem to have somewhat successfully deployed Oxite to a medium-trust shared host (GoDaddy shared hosting) running inside of a virtual directory (I host a few sites there). I setup a sql server 2005 database with the oxite tables (via the setup script) and changed the web.config connection string. Site runs (www.robrobbins.info), I can login with the admin user I created, however when I try to 'add a post' I get the following error:<br>\r\n<br>\r\n<span>\r\n<h2> <em>Security Exception</em> </h2>\r\n</span>\r\n<span style=\"font-family:arial,helvetica,geneva,sunsans-regular,sans-serif\">\r\n<strong> Description: </strong>The\r\napplication attempted to perform an operation not allowed by the\r\nsecurity policy. &nbsp;To grant this application the required permission\r\nplease contact your system administrator or change the application's\r\ntrust level in the configuration file. <br>\r\n<br>\r\n<strong> Exception Details: </strong>System.Security.SecurityException: That assembly does not allow partially trusted callers.<br>\r\n<br>\r\n<strong>Source Error:</strong> <br>\r\n<br>\r\n<table width=\"100%\" style=\"background-color:#ffffcc\">\r\n    <tbody>\r\n        <tr>\r\n            <td>\r\n            <code></code>\r\n            <pre>Line 2:  &lt;%@ Import Namespace=&quot;Oxite.Mvc.Extensions&quot; %&gt;\r\nLine 3:      &lt;form method=&quot;post&quot; action=&quot;&quot;&gt;\r\n<span style=\"color:red\">Line 4:          &lt;div class=&quot;avatar&quot;&gt;&lt;%=Html.Gravatar(&quot;48&quot;) %&gt;&lt;/div&gt;\r\n</span>Line 5:  \t    &lt;h2 class=&quot;title&quot;&gt;\r\nLine 6:  \t        &lt;label for=&quot;post_title&quot;&gt;&lt;%=Model.Localize(&quot;Title&quot;)%&gt;&lt;/label&gt;&lt;%=Html.ValidationMessage(&quot;Post.Title&quot;, Model.Localize(&quot;Title isn't valid.&quot;)) %&gt;</pre>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n</span><br>\r\n",
    "PostedDate": "2009-03-22T10:17:46.747-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "170709",
    "ThreadId": "50901",
    "Html": "Did some more experimenting, I can run the project from my local machine (logged into the remote database on my server[godaddy]) and run the site fine, add and edit posts etc..However once compiled and copied to the shared server environment <br>\r\nI get the security exceptions regularly. Now, after creating new posts from the local machine (to the remote DB) the site won't open when navigated to :<br>\r\n<br>\r\nfunny thing is this:<br>\r\nwww.robrobbins.info (security error) &quot;That assembly does not allow partially trusted callers&quot;<br>\r\nwww.robrobbins.info/About (opens fine, no error).<br>\r\n<br>\r\nShould there be a use of AllowPartiallyTrustedCallersAttribute?<br>\r\n<br>\r\n<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2009-03-22T20:22:24.317-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "170755",
    "ThreadId": "50901",
    "Html": "I honestly have no idea what that Gravatar extension method would cause for that error to happen.<br>\r\n<br>\r\nOxite requires Medium Trust + the Reflection Permission to run, but again, not sure what that Gravatar extenion method would have to do with it.  Is the server your hosted on running .NET 3.5 SP 1?<br>\r\n<br>\r\nDoes GoDaddy support have anything to say about it since this is a production environment issue?\r\n",
    "PostedDate": "2009-03-23T01:00:58.573-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "170899",
    "ThreadId": "50901",
    "Html": "Yes on the 3.5 and sp1, my account is also using IIS7. <br>\r\n<br>\r\nI think the answer may lie with the reflection permission, that I will pursue today, anyone else have this issue? <br>\r\n<br>\r\n",
    "PostedDate": "2009-03-23T09:03:53.493-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "170915",
    "ThreadId": "50901",
    "Html": "Reflection permissions are required for our LINQ to SQL data provider so anyone that doesn't have them won't be able to run Oxite.  Some providers seem to allow it by default, some don't.  You might try asking them to turn it on for you if it's not on already.\r\n",
    "PostedDate": "2009-03-23T09:38:05.83-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "171393",
    "ThreadId": "50901",
    "Html": "Still following up with godaddy. Erik, would using the AllowPartiallyTrustedCallersAttribute fix this? If I placed this on the assemblyinfo.cs would this work or only produce more errors? I'm away from my<br>\r\ndesk all day and will have to try this tomorrow...I may just need to move away from GoDaddy.<br>\r\n<br>\r\n",
    "PostedDate": "2009-03-24T09:50:27.357-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "171415",
    "ThreadId": "50901",
    "Html": "To be honest, I have no idea if that would help or hurt.  I don't know much about it.  You could try.  It's not like getting worse will hurt too much.  :)<br>\r\n<br>\r\nI'd be interested to hear what GoDaddy comes back with, but if you have to move, I know DiscountASP .NET and Server Intellect work fine with Oxite and I'm sure there are others.\r\n",
    "PostedDate": "2009-03-24T11:02:16.993-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "171456",
    "ThreadId": "50901",
    "Html": "GoDaddy came back with an absolute no on reflection permission. Tomorrow I am going to attempt the mod's with the allowPartialTrustCallers attribute. I think that if Oxite is going to<br>\r\nattempt to position itself into the mainstream this issue is a must-fix. The cost rises drastically when looking at discount asp.net and server intellect. I thought discount asp.net <br>\r\nmay be an alternative but just by adding ms sql (05 or 08) to your account doubles the price! no thanks. <br>\r\n<br>\r\nAnyway, I'll post tomorrow my results...<br>\r\n<br>\r\n<br>\r\n",
    "PostedDate": "2009-03-24T12:19:35.953-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "171478",
    "ThreadId": "50901",
    "Html": "I am running oxite on webhost4life and it is less than 10 bucks a month.  You MAY even be able to do it on their 5 bucks a month plan, but I'm not sure.  I had to ask that my application be run in integrated pipeline mode, but that's about it.  That was more because of MVC and less of anything to do with Oxite.\r\n",
    "PostedDate": "2009-03-24T12:56:37.497-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "171519",
    "ThreadId": "50901",
    "Html": "You know I looked at your post and meant to email you, I will probably contact them tomorrow, I just developed a site for a guy<br>\r\nwho hosts there. I really liked the live text chat feature, handy...<br>\r\n",
    "PostedDate": "2009-03-24T13:37:22.067-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "171523",
    "ThreadId": "50901",
    "Html": "Ok, now I HAVE to tell the whole story.  ;)<br>\r\n<br>\r\nI uploaded my slightly modified oxite site.  Crashed.  I logged into webhost4life and got on the chat with them.  As it turned out changing my application to run with the right app pool etc., was not something that person was allowed to do so they helped me submit a ticket to go to the advanced support guys and within an hour I was all set.<br>\r\n<br>\r\nThe price is right (my opinion), speed is decent, support so far has really been great.  I suspect over the course of the year and I half I've worked with them I've submitted more than 10 tickets for various things and have always got a prompt reply.  Best host I've worked with for cheap.\r\n",
    "PostedDate": "2009-03-24T13:43:10.203-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "172392",
    "ThreadId": "50901",
    "Html": "I didn't have success yesterday with decorating the assemblyinfo.cs files with the 'AllowPartiallyTrustedCallers' attribute. I looked at perhaps adding it at the class level, but I noticed that if the<br>\r\nattribute existed in ANY class in the solution (this per each of the 5 sections in the solution) placing it in the assemblyinfo.cs results in an error stating that you have the attribute twice. Therefore<br>\r\nI am assuming, possibly erroneously, that placing the attribute in every class would be no more effective than placing it once in the assemblyinfo. Anybody? Anyway, that raised to me the question<br>\r\n'perhaps this error is arising from an assembly outside of the compiled OxiteSite being called by a partially trusted caller (inside of the compiled site)'. An assembly in the server GAC maybe? Am I <br>\r\nwrong there? Something I do not have access to decorate with the AllowPartiallyTrustedCallers attribute?<br>\r\n<br>\r\nOn to another host then, barring a breakthrough, I contacted webhost4life and discountASP.net...nosajis what was that app pool mod you had to make? so I can know ahead of time, wh4l is<br>\r\nprobably where I'm going.<br>\r\n<br>\r\nrob.r<br>\r\n",
    "PostedDate": "2009-03-26T09:19:40.927-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "172481",
    "ThreadId": "50901",
    "Html": "If they have ASP.NET MVC installed on your server then you're getting that from the GAC.  Otherwise, it's loading from your bin dir.  I wouldn't think MVC would be the problem here though.  Other than MVC and .NET 3.5, Oxite is self contained.\r\n",
    "PostedDate": "2009-03-26T13:08:38.25-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "172482",
    "ThreadId": "50901",
    "Html": "Rob, they called it integrated application pool mode \r\n",
    "PostedDate": "2009-03-26T13:12:47.497-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "175850",
    "ThreadId": "50901",
    "Html": "Did anyone get this thing running on GoDaddy?   I have the same error when trying to add a post.\r\n",
    "PostedDate": "2009-04-05T10:39:10.697-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "241857",
    "ThreadId": "50901",
    "Html": "<p>I have this running on a Godaddy medium trust level account. The problem is in the AntiXSSLibrary. Rebuilding the library with&nbsp;<span style=\"font-size:x-small\">[</span><span style=\"color:#0000ff;font-size:x-small\"><span style=\"color:#0000ff;font-size:x-small\">assembly</span></span><span style=\"font-size:x-small\">: System.Security.</span><span style=\"color:#2b91af;font-size:x-small\"><span style=\"color:#2b91af;font-size:x-small\">AllowPartiallyTrustedCallers</span></span><span style=\"font-size:x-small\">()] in the Assembly.info didn't work for me. But the next steps did solve my problem:</span></p>\r\n<p><span style=\"font-size:x-small\">1) I delete the reference to the&nbsp;Library&nbsp;from my Oxite project. <br>2) I copied the used functions from AntiXSS to a new class in my Oxite project (see code below)<br>3) Change <span style=\"color:#0000ff\">using&nbsp;</span>Microsoft.Security.Application in <span style=\"color:#000000\">StringExtensions </span>to: <span style=\"color:#0000ff\">using</span> </span><span style=\"font-size:x-small\">Oxite.Security.Application</span><span style=\"font-size:x-small\"><br>4) Rebuild and publish my Oxite Solutions.<br><br>\r\n<div style=\"color:Black;background-color:White\">\r\n<pre><span style=\"color:Blue\">using</span> System;\r\n<span style=\"color:Blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:Blue\">using</span> System.Linq;\r\n<span style=\"color:Blue\">using</span> System.Text;\r\n\r\n<span style=\"color:Blue\">namespace</span> Oxite.Security.Application\r\n{\r\n    <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">sealed</span> <span style=\"color:Blue\">class</span> AntiXss\r\n    {\r\n        <span style=\"color:Blue\">private</span> AntiXss() { }\r\n        <span style=\"color:Blue\">#region</span> HTMLEncode - string input\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\">---------------------------------------------------------------------</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Encodes input strings for use in HTML.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;input&quot;&gt;</span><span style=\"color:Green\">String to be encoded&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\">     Encoded string for use in HTML.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;remarks&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> This function encodes all but known safe characters.  Characters are encoded using  &amp;amp;#DECIMAL; notation.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;newpara/&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Safe characters include:</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;list type=&quot;table&quot;&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">a-z&lt;/term&gt;&lt;description&gt;Lower case alphabet&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">A-Z&lt;/term&gt;&lt;description&gt;Upper case alphabet&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">0-9&lt;/term&gt;&lt;description&gt;Numbers&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">,&lt;/term&gt;&lt;description&gt;Comma&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">.&lt;/term&gt;&lt;description&gt;Period&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">-&lt;/term&gt;&lt;description&gt;Dash&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">_&lt;/term&gt;&lt;description&gt;Underscore&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span> <span style=\"color:Gray\">&lt;/term&gt;</span><span style=\"color:Gray\">&lt;description&gt;</span><span style=\"color:Green\">Space&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span> <span style=\"color:Gray\">&lt;/term&gt;</span><span style=\"color:Gray\">&lt;description&gt;</span><span style=\"color:Green\">Other International character ranges&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/list&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;newpara/&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Example inputs and their related encoded outputs:</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;list type=&quot;table&quot;&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">alert('XSS Attack!');&lt;/term&gt;&lt;description&gt;alert&amp;#40;&amp;#39;XSS Attack&amp;#33;&amp;#39;&amp;#41;&amp;#59;&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">user@contoso.com&lt;/term&gt;&lt;description&gt;user&amp;#64;contoso.com&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">Anti-Cross Site Scripting Library&lt;/term&gt;&lt;description&gt;Anti-Cross Site Scripting Library&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/list&gt;</span><span style=\"color:Gray\">&lt;/remarks&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\">---------------------------------------------------------------------</span>\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">string</span> HtmlEncode(<span style=\"color:Blue\">string</span> input)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (String.IsNullOrEmpty(input))\r\n                <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">string</span>.Empty;\r\n\r\n            <span style=\"color:Green\">// Use a new char array.</span>\r\n            <span style=\"color:Blue\">int</span> len = 0;\r\n            <span style=\"color:Blue\">int</span> tLen = input.Length;\r\n            <span style=\"color:Blue\">char</span>[] returnMe = <span style=\"color:Blue\">new</span> <span style=\"color:Blue\">char</span>[tLen * 8];\r\n            <span style=\"color:Blue\">char</span>[] thisChar;\r\n            <span style=\"color:Blue\">int</span> thisCharID;\r\n            <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 0; i &lt; tLen; i++)\r\n            {\r\n                thisCharID = (<span style=\"color:Blue\">int</span>)input[i];\r\n\r\n                <span style=\"color:Blue\">if</span> (WhitelistCodes[thisCharID] != <span style=\"color:Blue\">null</span>)\r\n                {\r\n                    <span style=\"color:Green\">// character needs to be encoded</span>\r\n                    thisChar = WhitelistCodes[thisCharID];\r\n                    returnMe[len++] = <span style=\"color:#A31515\">'&amp;'</span>;\r\n                    returnMe[len++] = <span style=\"color:#A31515\">'#'</span>;\r\n                    <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> j = 0; j &lt; thisChar.Length; j++)\r\n                    {\r\n                        returnMe[len++] = thisChar[j];\r\n                    }\r\n                    returnMe[len++] = <span style=\"color:#A31515\">';'</span>;\r\n                }\r\n                <span style=\"color:Blue\">else</span>\r\n                {\r\n                    <span style=\"color:Green\">// character does not need encoding</span>\r\n                    returnMe[len++] = input[i];\r\n                }\r\n            }\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">new</span> String(returnMe, 0, len);\r\n        }\r\n        <span style=\"color:Blue\">#endregion</span>\r\n\r\n        <span style=\"color:Blue\">#region</span> HTMLAttributeEncode_Method\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\">---------------------------------------------------------------------</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Encodes input strings for use in HTML attributes.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;param name=&quot;input&quot;&gt;</span><span style=\"color:Green\">String to be encoded&lt;/param&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;returns&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\">     Encoded string for use in HTML attributes.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/returns&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;remarks&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> This function encodes all but known safe characters.  Characters are encoded using  &amp;amp;#DECIMAL; notation.</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;newpara/&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Safe characters include:</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;list type=&quot;table&quot;&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">a-z&lt;/term&gt;&lt;description&gt;Lower case alphabet&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">A-Z&lt;/term&gt;&lt;description&gt;Upper case alphabet&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">0-9&lt;/term&gt;&lt;description&gt;Numbers&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">,&lt;/term&gt;&lt;description&gt;Comma&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">.&lt;/term&gt;&lt;description&gt;Period&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">-&lt;/term&gt;&lt;description&gt;Dash&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">_&lt;/term&gt;&lt;description&gt;Underscore&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span> <span style=\"color:Gray\">&lt;/term&gt;</span><span style=\"color:Gray\">&lt;description&gt;</span><span style=\"color:Green\">Other International character ranges&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/list&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;newpara/&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\"> Example inputs and encoded outputs:</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;list type=&quot;table&quot;&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">alert('XSS Attack!');&lt;/term&gt;&lt;description&gt;alert&amp;#40;&amp;#39;XSS&amp;#32;Attack&amp;#33;&amp;#39;&amp;#41;&amp;#59;&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">user@contoso.com&lt;/term&gt;&lt;description&gt;user&amp;#64;contoso.com&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;item&gt;</span><span style=\"color:Gray\">&lt;term&gt;</span><span style=\"color:Green\">Anti-Cross Site Scripting Library&lt;/term&gt;&lt;description&gt;Anti-Cross&amp;#32;Site&amp;#32;Scripting&amp;#32;Library&lt;/description&gt;&lt;/item&gt;</span>\r\n        <span style=\"color:Gray\">///</span> <span style=\"color:Gray\">&lt;/list&gt;</span><span style=\"color:Gray\">&lt;/remarks&gt;</span>\r\n        <span style=\"color:Gray\">///</span><span style=\"color:Green\">---------------------------------------------------------------------</span>\r\n        <span style=\"color:Blue\">public</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">string</span> HtmlAttributeEncode(<span style=\"color:Blue\">string</span> input)\r\n        {\r\n            <span style=\"color:Blue\">if</span> (String.IsNullOrEmpty(input))\r\n                <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">string</span>.Empty;\r\n\r\n            <span style=\"color:Green\">// Use a new char array.</span>\r\n            <span style=\"color:Blue\">int</span> len = 0;\r\n            <span style=\"color:Blue\">int</span> tLen = input.Length;\r\n            <span style=\"color:Blue\">char</span>[] returnMe = <span style=\"color:Blue\">new</span> <span style=\"color:Blue\">char</span>[tLen * 8]; <span style=\"color:Green\">// worst case length scenario</span>\r\n            <span style=\"color:Blue\">char</span>[] thisChar;\r\n            <span style=\"color:Blue\">int</span> thisCharID;\r\n            <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 0; i &lt; tLen; i++)\r\n            {\r\n                thisCharID = (<span style=\"color:Blue\">int</span>)input[i];\r\n                <span style=\"color:Blue\">if</span> ((WhitelistCodes[thisCharID] != <span style=\"color:Blue\">null</span>)\r\n                    || (thisCharID == 32)   <span style=\"color:Green\">//escaping space for HTMLAttribute Encoding</span>\r\n                    )\r\n                {\r\n                    <span style=\"color:Green\">// character needs to be encoded</span>\r\n                    thisChar = WhitelistCodes[thisCharID];\r\n\r\n                    returnMe[len++] = <span style=\"color:#A31515\">'&amp;'</span>;\r\n                    returnMe[len++] = <span style=\"color:#A31515\">'#'</span>;\r\n                    <span style=\"color:Blue\">if</span> (thisCharID == 32)\r\n                    {\r\n                        returnMe[len++] = <span style=\"color:#A31515\">'3'</span>;\r\n                        returnMe[len++] = <span style=\"color:#A31515\">'2'</span>;\r\n                    }\r\n                    <span style=\"color:Blue\">else</span>\r\n                    {\r\n                        <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> j = 0; j &lt; thisChar.Length; j++)\r\n                        {\r\n                            returnMe[len++] = thisChar[j];\r\n                        }\r\n                    }\r\n                    returnMe[len++] = <span style=\"color:#A31515\">';'</span>;\r\n                }\r\n                <span style=\"color:Blue\">else</span>\r\n                {\r\n                    <span style=\"color:Green\">// character does not need encoding</span>\r\n                    returnMe[len++] = input[i];\r\n                }\r\n            }\r\n            <span style=\"color:Blue\">return</span> <span style=\"color:Blue\">new</span> String(returnMe, 0, len);\r\n        }\r\n\r\n        <span style=\"color:Blue\">#endregion</span>\r\n\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">char</span>[][] WhitelistCodes = InitWhitelistCodes();\r\n\r\n        [System.Diagnostics.CodeAnalysis.SuppressMessage(<span style=\"color:#A31515\">&quot;Microsoft.Globalization&quot;</span>, <span style=\"color:#A31515\">&quot;CA1305:SpecifyIFormatProvider&quot;</span>, MessageId = <span style=\"color:#A31515\">&quot;System.Int32.ToString&quot;</span>), System.Diagnostics.CodeAnalysis.SuppressMessage(<span style=\"color:#A31515\">&quot;Microsoft.Maintainability&quot;</span>, <span style=\"color:#A31515\">&quot;CA1502:AvoidExcessiveComplexity&quot;</span>)]\r\n        <span style=\"color:Blue\">private</span> <span style=\"color:Blue\">static</span> <span style=\"color:Blue\">char</span>[][] InitWhitelistCodes()\r\n        {\r\n            <span style=\"color:Blue\">char</span>[][] allCharacters = <span style=\"color:Blue\">new</span> <span style=\"color:Blue\">char</span>[65536][];\r\n            <span style=\"color:Blue\">char</span>[] thisChar;\r\n            <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> i = 0; i &lt; allCharacters.Length; i++)\r\n            {\r\n                <span style=\"color:Blue\">if</span> (\r\n                    (i &gt;= 97 &amp;&amp; i &lt;= 122) ||        <span style=\"color:Green\">// a-z</span>\r\n                    (i &gt;= 65 &amp;&amp; i &lt;= 90) ||         <span style=\"color:Green\">// A-Z</span>\r\n                    (i &gt;= 48 &amp;&amp; i &lt;= 57) ||         <span style=\"color:Green\">// 0-9</span>\r\n                    i == 32 ||                      <span style=\"color:Green\">// space</span>\r\n                    i == 46 ||                      <span style=\"color:Green\">// .</span>\r\n                    i == 44 ||                      <span style=\"color:Green\">// ,</span>\r\n                    i == 45 ||                      <span style=\"color:Green\">// -</span>\r\n                    i == 95 ||                      <span style=\"color:Green\">// _</span>\r\n                    (i &gt;= 256 &amp;&amp; i &lt;= 591) ||       <span style=\"color:Green\">// Latin,Extended-A,Latin Extended-B        </span>\r\n                    (i &gt;= 880 &amp;&amp; i &lt;= 2047) ||      <span style=\"color:Green\">// Greek and Coptic,Cyrillic,Cyrillic Supplement,Armenian,Hebrew,Arabic,Syriac,Arabic,Supplement,Thaana,NKo</span>\r\n                    (i &gt;= 2304 &amp;&amp; i &lt;= 6319) ||     <span style=\"color:Green\">// Devanagari,Bengali,Gurmukhi,Gujarati,Oriya,Tamil,Telugu,Kannada,Malayalam,Sinhala,Thai,Lao,Tibetan,Myanmar,eorgian,Hangul Jamo,Ethiopic,Ethiopic Supplement,Cherokee,Unified Canadian Aboriginal Syllabics,Ogham,Runic,Tagalog,Hanunoo,Buhid,Tagbanwa,Khmer,Mongolian   </span>\r\n                    (i &gt;= 6400 &amp;&amp; i &lt;= 6687) ||     <span style=\"color:Green\">// Limbu, Tai Le, New Tai Lue, Khmer, Symbols, Buginese</span>\r\n                    (i &gt;= 6912 &amp;&amp; i &lt;= 7039) ||     <span style=\"color:Green\">// Balinese         </span>\r\n                    (i &gt;= 7680 &amp;&amp; i &lt;= 8191) ||     <span style=\"color:Green\">// Latin Extended Additional, Greek Extended        </span>\r\n                    (i &gt;= 11264 &amp;&amp; i &lt;= 11743) ||   <span style=\"color:Green\">// Glagolitic, Latin Extended-C, Coptic, Georgian Supplement, Tifinagh, Ethiopic Extended    </span>\r\n                    (i &gt;= 12352 &amp;&amp; i &lt;= 12591) ||   <span style=\"color:Green\">// Hiragana, Katakana, Bopomofo       </span>\r\n                    (i &gt;= 12688 &amp;&amp; i &lt;= 12735) ||   <span style=\"color:Green\">// Kanbun, Bopomofo Extended        </span>\r\n                    (i &gt;= 12784 &amp;&amp; i &lt;= 12799) ||   <span style=\"color:Green\">// Katakana, Phonetic Extensions         </span>\r\n                    (i &gt;= 40960 &amp;&amp; i &lt;= 42191) ||   <span style=\"color:Green\">// Yi Syllables, Yi Radicals        </span>\r\n                    (i &gt;= 42784 &amp;&amp; i &lt;= 43055) ||   <span style=\"color:Green\">// Latin Extended-D, Syloti, Nagri        </span>\r\n                    (i &gt;= 43072 &amp;&amp; i &lt;= 43135) ||   <span style=\"color:Green\">// Phags-pa         </span>\r\n                    (i &gt;= 44032 &amp;&amp; i &lt;= 55215) ||   <span style=\"color:Green\">// Hangul Syllables </span>\r\n                    (i &gt;= 19968 &amp;&amp; i &lt;= 40899)      <span style=\"color:Green\">// Mixed japanese/chinese/korean</span>\r\n                )\r\n                {\r\n                    allCharacters[i] = <span style=\"color:Blue\">null</span>;\r\n                }\r\n                <span style=\"color:Blue\">else</span>\r\n                {\r\n                    <span style=\"color:Blue\">string</span> iString = i.ToString();\r\n                    <span style=\"color:Blue\">int</span> iStringLen = iString.Length;\r\n                    thisChar = <span style=\"color:Blue\">new</span> <span style=\"color:Blue\">char</span>[iStringLen];     <span style=\"color:Green\">// everything else</span>\r\n                    <span style=\"color:Blue\">for</span> (<span style=\"color:Blue\">int</span> j = 0; j &lt; iStringLen; j++)\r\n                    {\r\n                        thisChar[j] = iString[j];\r\n                    }\r\n                    allCharacters[i] = thisChar;\r\n                }\r\n            }\r\n            <span style=\"color:Blue\">return</span> allCharacters;\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n</span></p>",
    "PostedDate": "2009-10-04T05:45:03.483-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]